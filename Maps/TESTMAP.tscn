[gd_scene load_steps=26 format=2]

[ext_resource path="res://Maps/Geometry.tres" type="PhysicsMaterial" id=1]
[ext_resource path="res://Player/MAIN_GUY.tscn" type="PackedScene" id=2]
[ext_resource path="res://Maps/TESTMAT.tres" type="Shader" id=3]
[ext_resource path="res://Maps/1MOrange.png" type="Texture" id=4]

[sub_resource type="ShaderMaterial" id=2]
shader = ExtResource( 3 )

[sub_resource type="ArrayMesh" id=3]
resource_name = "Cube"
surfaces/0 = {
"aabb": AABB( -0.998721, -1.00389, -1.00634, 2, 2.00001, 2 ),
"array_data": PoolByteArray( 46, 172, 127, 191, 222, 0, 127, 63, 192, 207, 128, 191, 0, 127, 129, 63, 255, 255, 255, 255, 0, 60, 254, 59, 241, 41, 128, 63, 222, 0, 127, 63, 145, 96, 126, 63, 0, 127, 129, 63, 255, 255, 255, 255, 170, 13, 24, 148, 241, 41, 128, 63, 222, 0, 127, 63, 192, 207, 128, 191, 0, 127, 129, 63, 255, 255, 255, 255, 170, 13, 254, 59, 241, 41, 128, 63, 222, 0, 127, 63, 145, 96, 126, 63, 0, 0, 126, 63, 255, 255, 255, 255, 0, 60, 236, 147, 46, 172, 127, 191, 120, 127, 128, 191, 145, 96, 126, 63, 0, 0, 126, 63, 255, 255, 255, 255, 31, 13, 254, 59, 241, 41, 128, 63, 120, 127, 128, 191, 145, 96, 126, 63, 0, 0, 126, 63, 255, 255, 255, 255, 0, 60, 254, 59, 46, 172, 127, 191, 222, 0, 127, 63, 145, 96, 126, 63, 129, 0, 0, 63, 255, 255, 255, 255, 0, 60, 236, 147, 46, 172, 127, 191, 120, 127, 128, 191, 192, 207, 128, 191, 129, 0, 0, 63, 255, 255, 255, 255, 31, 13, 254, 59, 46, 172, 127, 191, 120, 127, 128, 191, 145, 96, 126, 63, 129, 0, 0, 63, 255, 255, 255, 255, 0, 60, 254, 59, 241, 41, 128, 63, 120, 127, 128, 191, 192, 207, 128, 191, 0, 129, 127, 63, 255, 255, 255, 255, 0, 60, 254, 59, 46, 172, 127, 191, 120, 127, 128, 191, 145, 96, 126, 63, 0, 129, 127, 63, 255, 255, 255, 255, 170, 13, 24, 148, 46, 172, 127, 191, 120, 127, 128, 191, 192, 207, 128, 191, 0, 129, 127, 63, 255, 255, 255, 255, 170, 13, 254, 59, 241, 41, 128, 63, 222, 0, 127, 63, 192, 207, 128, 191, 127, 0, 126, 127, 255, 255, 255, 255, 0, 60, 236, 147, 241, 41, 128, 63, 120, 127, 128, 191, 145, 96, 126, 63, 127, 0, 126, 127, 255, 255, 255, 255, 31, 13, 254, 59, 241, 41, 128, 63, 120, 127, 128, 191, 192, 207, 128, 191, 127, 0, 126, 127, 255, 255, 255, 255, 0, 60, 254, 59, 46, 172, 127, 191, 222, 0, 127, 63, 192, 207, 128, 191, 127, 127, 130, 63, 255, 255, 255, 255, 0, 60, 236, 147, 241, 41, 128, 63, 120, 127, 128, 191, 192, 207, 128, 191, 127, 127, 130, 63, 255, 255, 255, 255, 31, 13, 254, 59, 46, 172, 127, 191, 120, 127, 128, 191, 192, 207, 128, 191, 127, 127, 130, 63, 255, 255, 255, 255, 0, 60, 254, 59, 46, 172, 127, 191, 222, 0, 127, 63, 145, 96, 126, 63, 0, 127, 129, 63, 255, 255, 255, 255, 0, 60, 24, 148, 46, 172, 127, 191, 222, 0, 127, 63, 145, 96, 126, 63, 0, 0, 126, 63, 255, 255, 255, 255, 50, 14, 58, 148, 46, 172, 127, 191, 222, 0, 127, 63, 192, 207, 128, 191, 129, 0, 0, 63, 255, 255, 255, 255, 50, 14, 58, 148, 241, 41, 128, 63, 120, 127, 128, 191, 145, 96, 126, 63, 0, 129, 127, 63, 255, 255, 255, 255, 0, 60, 24, 148, 241, 41, 128, 63, 222, 0, 127, 63, 192, 207, 128, 191, 127, 0, 126, 127, 255, 255, 255, 255, 0, 60, 236, 147, 241, 41, 128, 63, 222, 0, 127, 63, 145, 96, 126, 63, 127, 0, 126, 127, 255, 255, 255, 255, 50, 14, 58, 148, 241, 41, 128, 63, 120, 127, 128, 191, 145, 96, 126, 63, 127, 0, 126, 127, 255, 255, 255, 255, 31, 13, 254, 59, 241, 41, 128, 63, 222, 0, 127, 63, 192, 207, 128, 191, 127, 127, 130, 63, 255, 255, 255, 255, 50, 14, 58, 148 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 3, 0, 5, 0, 4, 0, 6, 0, 8, 0, 7, 0, 9, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 15, 0, 17, 0, 16, 0, 0, 0, 1, 0, 18, 0, 3, 0, 4, 0, 19, 0, 6, 0, 7, 0, 20, 0, 9, 0, 10, 0, 21, 0, 22, 0, 24, 0, 23, 0, 15, 0, 16, 0, 25, 0 ),
"blend_shape_data": [  ],
"format": 2194719,
"index_count": 36,
"material": SubResource( 2 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 26
}

[sub_resource type="ConcavePolygonShape" id=10]
data = PoolVector3Array( -0.9987, 0.9961, -1.0063, 1.0013, 0.9961, -1.0063, 1.0013, 0.9961, 0.9937, 1.0013, 0.9961, 0.9937, 1.0013, -1.0039, 0.9937, -0.9987, -1.0039, 0.9937, -0.9987, 0.9961, 0.9937, -0.9987, -1.0039, 0.9937, -0.9987, -1.0039, -1.0063, 1.0013, -1.0039, -1.0063, -0.9987, -1.0039, -1.0063, -0.9987, -1.0039, 0.9937, 1.0013, 0.9961, -1.0063, 1.0013, -1.0039, -1.0063, 1.0013, -1.0039, 0.9937, -0.9987, 0.9961, -1.0063, -0.9987, -1.0039, -1.0063, 1.0013, -1.0039, -1.0063, -0.9987, 0.9961, -1.0063, 1.0013, 0.9961, 0.9937, -0.9987, 0.9961, 0.9937, 1.0013, 0.9961, 0.9937, -0.9987, -1.0039, 0.9937, -0.9987, 0.9961, 0.9937, -0.9987, 0.9961, 0.9937, -0.9987, -1.0039, -1.0063, -0.9987, 0.9961, -1.0063, 1.0013, -1.0039, -1.0063, -0.9987, -1.0039, 0.9937, 1.0013, -1.0039, 0.9937, 1.0013, 0.9961, -1.0063, 1.0013, -1.0039, 0.9937, 1.0013, 0.9961, 0.9937, -0.9987, 0.9961, -1.0063, 1.0013, -1.0039, -1.0063, 1.0013, 0.9961, -1.0063 )

[sub_resource type="ShaderMaterial" id=11]
shader = ExtResource( 3 )

[sub_resource type="ArrayMesh" id=5]
resource_name = "Plane001"
surfaces/0 = {
"aabb": AABB( -25, 0, -25, 50, 1e-05, 50 ),
"array_data": PoolByteArray( 0, 0, 200, 65, 0, 0, 0, 0, 0, 0, 200, 65, 0, 127, 127, 63, 128, 78, 64, 78, 0, 0, 200, 193, 0, 0, 0, 0, 0, 0, 200, 193, 0, 127, 127, 63, 0, 0, 0, 0, 0, 0, 200, 193, 0, 0, 0, 0, 0, 0, 200, 65, 0, 127, 127, 63, 0, 0, 64, 78, 0, 0, 200, 65, 0, 0, 0, 0, 0, 0, 200, 193, 0, 127, 127, 63, 128, 78, 0, 0 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 3, 0 ),
"blend_shape_data": [  ],
"format": 2194711,
"index_count": 6,
"material": SubResource( 11 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 4
}

[sub_resource type="ConcavePolygonShape" id=12]
data = PoolVector3Array( 25, 0, 25, -25, 0, 25, -25, 0, -25, 25, 0, 25, -25, 0, -25, 25, 0, -25 )

[sub_resource type="Shader" id=1]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0: hint_albedo;


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}

void vertex () {
}

void fragment () {
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node0_in0_vector = vec3(0.0, 0.0, 0.0);
	// output sockets definitions
	vec4 node0_out0_color;
	float node0_out1_alpha;
	
	node0_in0_vector = vec3(UV, 0.0);
	node_tex_image(node0_in0_vector, texture_0, node0_out0_color, node0_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node1_in0_basecolor = node0_out0_color;
	float node1_in1_subsurface = float(0.0);
	vec3 node1_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node1_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node1_in4_metallic = float(0.0);
	float node1_in5_specular = float(0.5);
	float node1_in6_speculartint = float(0.0);
	float node1_in7_roughness = float(0.4000000059604645);
	float node1_in8_anisotropic = float(0.0);
	float node1_in9_anisotropicrotation = float(0.0);
	float node1_in10_sheen = float(0.0);
	float node1_in11_sheentint = float(0.5);
	float node1_in12_clearcoat = float(0.0);
	float node1_in13_clearcoatroughness = float(0.029999999329447746);
	float node1_in14_ior = float(1.4500000476837158);
	float node1_in15_transmission = float(0.0);
	float node1_in16_transmissionroughness = float(0.0);
	vec4 node1_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node1_in18_emissionstrength = float(1.0);
	float node1_in19_alpha = float(1.0);
	vec3 node1_in20_normal = NORMAL;
	vec3 node1_in21_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node1_in22_tangent = TANGENT;
	// output sockets definitions
	vec3 node1_bsdf_out0_albedo;
	float node1_bsdf_out1_sss_strength;
	float node1_bsdf_out3_specular;
	float node1_bsdf_out2_metallic;
	float node1_bsdf_out4_roughness;
	float node1_bsdf_out5_clearcoat;
	float node1_bsdf_out6_clearcoat_gloss;
	float node1_bsdf_out7_anisotropy;
	float node1_bsdf_out8_transmission;
	float node1_bsdf_out9_ior;
	
	node_bsdf_principled(node1_in0_basecolor, node1_in1_subsurface,
		node1_in3_subsurfacecolor, node1_in4_metallic, node1_in5_specular,
		node1_in7_roughness, node1_in12_clearcoat, node1_in13_clearcoatroughness,
		node1_in8_anisotropic, node1_in15_transmission, node1_in14_ior,
		node1_bsdf_out0_albedo, node1_bsdf_out1_sss_strength, node1_bsdf_out2_metallic,
		node1_bsdf_out3_specular, node1_bsdf_out4_roughness, node1_bsdf_out5_clearcoat,
		node1_bsdf_out6_clearcoat_gloss, node1_bsdf_out7_anisotropy,
		node1_bsdf_out8_transmission, node1_bsdf_out9_ior);
	
	
	ALBEDO = node1_bsdf_out0_albedo;
	SSS_STRENGTH = node1_bsdf_out1_sss_strength;
	SPECULAR = node1_bsdf_out3_specular;
	METALLIC = node1_bsdf_out2_metallic;
	ROUGHNESS = node1_bsdf_out4_roughness;
	CLEARCOAT = node1_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node1_bsdf_out6_clearcoat_gloss;
	NORMAL = node1_in20_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node1_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node1_in22_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node1_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 1 )
shader_param/texture_0 = ExtResource( 4 )

[sub_resource type="ArrayMesh" id=18]
resource_name = "Plane002"
surfaces/0 = {
"aabb": AABB( -12.5, 1.94055, -7.9758, 12.5, 1.00136e-05, 15.001 ),
"array_data": PoolByteArray( 150, 40, 166, 179, 241, 99, 248, 63, 63, 198, 224, 64, 0, 127, 127, 127, 0, 0, 0, 60, 0, 0, 72, 193, 241, 99, 248, 63, 193, 57, 255, 192, 0, 127, 127, 127, 128, 71, 64, 197, 0, 0, 72, 193, 241, 99, 248, 63, 63, 198, 224, 64, 0, 127, 127, 127, 0, 0, 64, 197, 150, 40, 166, 179, 241, 99, 248, 63, 193, 57, 255, 192, 0, 127, 127, 127, 128, 71, 0, 60, 150, 40, 166, 179, 241, 99, 248, 63, 112, 206, 224, 64, 0, 129, 127, 129, 0, 0, 0, 60, 0, 0, 72, 193, 241, 99, 248, 63, 112, 206, 224, 64, 0, 129, 127, 129, 0, 0, 64, 197, 0, 0, 72, 193, 241, 99, 248, 63, 144, 49, 255, 192, 0, 129, 127, 129, 128, 71, 64, 197, 150, 40, 166, 179, 241, 99, 248, 63, 144, 49, 255, 192, 0, 129, 127, 129, 128, 71, 0, 60 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 3, 0, 4, 0, 6, 0, 5, 0, 4, 0, 7, 0, 6, 0 ),
"blend_shape_data": [  ],
"format": 2194711,
"index_count": 12,
"material": SubResource( 6 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 8
}

[sub_resource type="ConcavePolygonShape" id=26]
data = PoolVector3Array( 0, 1.9406, 7.0242, -12.5, 1.9406, 7.0242, -12.5, 1.9406, -7.9758, 0, 1.9406, 7.0242, -12.5, 1.9406, -7.9758, 0, 1.9406, -7.9758, 0, 1.9406, 7.0252, -12.5, 1.9406, -7.9748, -12.5, 1.9406, 7.0252, 0, 1.9406, 7.0252, 0, 1.9406, -7.9748, -12.5, 1.9406, -7.9748 )

[sub_resource type="ShaderMaterial" id=15]
shader = ExtResource( 3 )

[sub_resource type="ArrayMesh" id=9]
resource_name = "Plane003"
surfaces/0 = {
"aabb": AABB( 0.5, 0, -0.5, 3.39449, 1.15731, 6.09925 ),
"array_data": PoolByteArray( 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 63, 239, 109, 0, 63, 160, 56, 0, 60, 252, 200, 125, 63, 102, 97, 164, 61, 58, 88, 79, 190, 239, 109, 0, 63, 0, 0, 64, 58, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 191, 239, 109, 0, 63, 0, 0, 0, 60, 158, 67, 105, 63, 102, 97, 164, 61, 12, 87, 75, 63, 234, 106, 247, 63, 160, 56, 64, 58, 211, 135, 186, 63, 9, 224, 54, 62, 122, 169, 8, 62, 234, 106, 247, 63, 0, 0, 32, 56, 252, 200, 125, 63, 102, 97, 164, 61, 58, 88, 79, 190, 234, 106, 247, 63, 0, 0, 64, 58, 43, 19, 166, 63, 9, 224, 54, 62, 38, 112, 143, 63, 228, 102, 239, 63, 160, 56, 32, 56, 127, 135, 242, 63, 6, 244, 154, 62, 134, 115, 1, 63, 228, 102, 239, 63, 0, 0, 64, 52, 211, 135, 186, 63, 9, 224, 54, 62, 122, 169, 8, 62, 228, 102, 239, 63, 0, 0, 32, 56, 243, 2, 212, 63, 6, 244, 154, 62, 196, 8, 189, 63, 218, 95, 231, 63, 160, 56, 64, 52, 199, 244, 30, 64, 78, 65, 10, 63, 100, 2, 90, 63, 218, 95, 231, 63, 0, 0, 0, 42, 127, 135, 242, 63, 6, 244, 154, 62, 134, 115, 1, 63, 218, 95, 231, 63, 0, 0, 64, 52, 28, 153, 5, 64, 187, 98, 2, 63, 117, 118, 226, 63, 227, 104, 181, 55, 160, 56, 128, 177, 99, 98, 51, 64, 219, 111, 37, 63, 175, 153, 168, 63, 227, 104, 181, 55, 0, 0, 128, 176, 199, 244, 30, 64, 78, 65, 10, 63, 100, 2, 90, 63, 227, 104, 181, 55, 0, 0, 0, 42, 89, 139, 21, 64, 197, 198, 24, 63, 86, 212, 12, 64, 227, 104, 183, 56, 160, 56, 64, 182, 6, 100, 69, 64, 226, 201, 62, 63, 126, 111, 231, 63, 227, 104, 183, 56, 0, 0, 64, 182, 99, 98, 51, 64, 219, 111, 37, 63, 175, 153, 168, 63, 227, 104, 183, 56, 0, 0, 128, 176, 196, 66, 35, 64, 35, 107, 45, 63, 230, 174, 41, 64, 227, 104, 186, 56, 160, 56, 128, 184, 224, 219, 84, 64, 133, 37, 86, 63, 59, 141, 20, 64, 227, 104, 186, 56, 0, 0, 224, 184, 6, 100, 69, 64, 226, 201, 62, 63, 126, 111, 231, 63, 227, 104, 186, 56, 0, 0, 64, 182, 151, 168, 46, 64, 174, 45, 64, 63, 61, 155, 71, 64, 227, 104, 185, 56, 160, 56, 64, 186, 96, 176, 97, 64, 75, 92, 107, 63, 57, 151, 54, 64, 227, 104, 185, 56, 0, 0, 224, 186, 224, 219, 84, 64, 133, 37, 86, 63, 59, 141, 20, 64, 227, 104, 185, 56, 0, 0, 224, 184, 38, 170, 55, 64, 170, 239, 80, 63, 224, 103, 102, 64, 227, 104, 183, 56, 160, 56, 0, 188, 142, 204, 107, 64, 85, 75, 126, 63, 220, 157, 89, 64, 227, 104, 183, 56, 0, 0, 79, 188, 96, 176, 97, 64, 75, 92, 107, 63, 57, 151, 54, 64, 227, 104, 183, 56, 0, 0, 224, 186, 134, 56, 62, 64, 79, 149, 95, 63, 65, 241, 130, 64, 227, 104, 179, 55, 160, 56, 224, 188, 180, 31, 115, 64, 152, 105, 135, 63, 77, 103, 125, 64, 227, 104, 179, 55, 0, 0, 48, 189, 142, 204, 107, 64, 85, 75, 126, 63, 220, 157, 89, 64, 227, 104, 179, 55, 0, 0, 79, 188, 233, 72, 66, 64, 158, 6, 108, 63, 112, 235, 146, 64, 227, 104, 185, 56, 160, 56, 128, 189, 220, 157, 119, 64, 160, 108, 142, 63, 72, 220, 144, 64, 227, 104, 185, 56, 0, 0, 64, 190, 180, 31, 115, 64, 152, 105, 135, 63, 77, 103, 125, 64, 227, 104, 185, 56, 0, 0, 48, 189, 191, 212, 67, 64, 22, 47, 118, 63, 49, 8, 163, 64, 227, 104, 186, 56, 160, 56, 96, 190, 83, 63, 121, 64, 188, 34, 148, 63, 237, 42, 163, 64, 227, 104, 186, 56, 0, 0, 32, 191, 220, 157, 119, 64, 160, 108, 142, 63, 72, 220, 144, 64, 227, 104, 186, 56, 0, 0, 64, 190, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 63, 235, 107, 247, 63, 160, 56, 0, 60, 158, 67, 105, 63, 102, 97, 164, 61, 12, 87, 75, 63, 235, 107, 247, 63, 160, 56, 64, 58, 252, 200, 125, 63, 102, 97, 164, 61, 58, 88, 79, 190, 235, 107, 247, 63, 0, 0, 64, 58, 158, 67, 105, 63, 102, 97, 164, 61, 12, 87, 75, 63, 230, 104, 239, 63, 160, 56, 64, 58, 43, 19, 166, 63, 9, 224, 54, 62, 38, 112, 143, 63, 230, 104, 239, 63, 160, 56, 32, 56, 211, 135, 186, 63, 9, 224, 54, 62, 122, 169, 8, 62, 230, 104, 239, 63, 0, 0, 32, 56, 43, 19, 166, 63, 9, 224, 54, 62, 38, 112, 143, 63, 224, 100, 231, 63, 160, 56, 32, 56, 243, 2, 212, 63, 6, 244, 154, 62, 196, 8, 189, 63, 224, 100, 231, 63, 160, 56, 64, 52, 127, 135, 242, 63, 6, 244, 154, 62, 134, 115, 1, 63, 224, 100, 231, 63, 0, 0, 64, 52, 243, 2, 212, 63, 6, 244, 154, 62, 196, 8, 189, 63, 213, 94, 205, 57, 160, 56, 64, 52, 28, 153, 5, 64, 187, 98, 2, 63, 117, 118, 226, 63, 213, 94, 205, 57, 160, 56, 128, 177, 199, 244, 30, 64, 78, 65, 10, 63, 100, 2, 90, 63, 213, 94, 205, 57, 0, 0, 0, 42, 28, 153, 5, 64, 187, 98, 2, 63, 117, 118, 226, 63, 227, 104, 183, 56, 160, 56, 128, 177, 89, 139, 21, 64, 197, 198, 24, 63, 86, 212, 12, 64, 227, 104, 183, 56, 160, 56, 64, 182, 99, 98, 51, 64, 219, 111, 37, 63, 175, 153, 168, 63, 227, 104, 183, 56, 0, 0, 128, 176, 89, 139, 21, 64, 197, 198, 24, 63, 86, 212, 12, 64, 227, 104, 183, 56, 160, 56, 64, 182, 196, 66, 35, 64, 35, 107, 45, 63, 230, 174, 41, 64, 227, 104, 183, 56, 160, 56, 128, 184, 6, 100, 69, 64, 226, 201, 62, 63, 126, 111, 231, 63, 227, 104, 183, 56, 0, 0, 64, 182, 196, 66, 35, 64, 35, 107, 45, 63, 230, 174, 41, 64, 227, 104, 185, 56, 160, 56, 128, 184, 151, 168, 46, 64, 174, 45, 64, 63, 61, 155, 71, 64, 227, 104, 185, 56, 160, 56, 64, 186, 224, 219, 84, 64, 133, 37, 86, 63, 59, 141, 20, 64, 227, 104, 185, 56, 0, 0, 224, 184, 151, 168, 46, 64, 174, 45, 64, 63, 61, 155, 71, 64, 227, 104, 185, 56, 160, 56, 64, 186, 38, 170, 55, 64, 170, 239, 80, 63, 224, 103, 102, 64, 227, 104, 185, 56, 160, 56, 0, 188, 96, 176, 97, 64, 75, 92, 107, 63, 57, 151, 54, 64, 227, 104, 185, 56, 0, 0, 224, 186, 38, 170, 55, 64, 170, 239, 80, 63, 224, 103, 102, 64, 227, 104, 181, 55, 160, 56, 0, 188, 134, 56, 62, 64, 79, 149, 95, 63, 65, 241, 130, 64, 227, 104, 181, 55, 160, 56, 224, 188, 142, 204, 107, 64, 85, 75, 126, 63, 220, 157, 89, 64, 227, 104, 181, 55, 0, 0, 79, 188, 134, 56, 62, 64, 79, 149, 95, 63, 65, 241, 130, 64, 227, 104, 181, 55, 160, 56, 224, 188, 233, 72, 66, 64, 158, 6, 108, 63, 112, 235, 146, 64, 227, 104, 181, 55, 160, 56, 128, 189, 180, 31, 115, 64, 152, 105, 135, 63, 77, 103, 125, 64, 227, 104, 181, 55, 0, 0, 48, 189, 233, 72, 66, 64, 158, 6, 108, 63, 112, 235, 146, 64, 227, 104, 186, 56, 160, 56, 128, 189, 191, 212, 67, 64, 22, 47, 118, 63, 49, 8, 163, 64, 227, 104, 186, 56, 160, 56, 96, 190, 220, 157, 119, 64, 160, 108, 142, 63, 72, 220, 144, 64, 227, 104, 186, 56, 0, 0, 64, 190, 191, 212, 67, 64, 22, 47, 118, 63, 49, 8, 163, 64, 227, 104, 185, 56, 160, 56, 96, 190, 106, 217, 66, 64, 223, 253, 125, 63, 14, 45, 179, 64, 227, 104, 185, 56, 160, 56, 32, 191, 83, 63, 121, 64, 188, 34, 148, 63, 237, 42, 163, 64, 227, 104, 185, 56, 0, 0, 32, 191 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 3, 0, 5, 0, 4, 0, 6, 0, 8, 0, 7, 0, 9, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 15, 0, 17, 0, 16, 0, 18, 0, 20, 0, 19, 0, 21, 0, 23, 0, 22, 0, 24, 0, 26, 0, 25, 0, 27, 0, 29, 0, 28, 0, 30, 0, 32, 0, 31, 0, 33, 0, 35, 0, 34, 0, 36, 0, 38, 0, 37, 0, 39, 0, 41, 0, 40, 0, 42, 0, 44, 0, 43, 0, 45, 0, 47, 0, 46, 0, 48, 0, 50, 0, 49, 0, 51, 0, 53, 0, 52, 0, 54, 0, 56, 0, 55, 0, 57, 0, 59, 0, 58, 0, 60, 0, 62, 0, 61, 0, 63, 0, 65, 0, 64, 0, 66, 0, 68, 0, 67, 0, 69, 0, 71, 0, 70, 0 ),
"blend_shape_data": [  ],
"format": 2194711,
"index_count": 72,
"material": SubResource( 15 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 72
}

[sub_resource type="ConcavePolygonShape" id=16]
data = PoolVector3Array( 0.5, 0, 0.5, 0.5, 0, -0.5, 0.9913, 0.0803, -0.2025, 0.9112, 0.0803, 0.7943, 0.9913, 0.0803, -0.2025, 1.4573, 0.1786, 0.1335, 1.2975, 0.1786, 1.1206, 1.4573, 0.1786, 0.1335, 1.8948, 0.3026, 0.5057, 1.6563, 0.3026, 1.4768, 1.8948, 0.3026, 0.5057, 2.4837, 0.5401, 0.8516, 2.0875, 0.5093, 1.7692, 2.4837, 0.5401, 0.8516, 2.8029, 0.6462, 1.3172, 2.3366, 0.5968, 2.2005, 2.8029, 0.6462, 1.3172, 3.0842, 0.7453, 1.8081, 2.551, 0.6774, 2.6513, 3.0842, 0.7453, 1.8081, 3.3259, 0.8365, 2.3211, 2.729, 0.7507, 3.1189, 3.3259, 0.8365, 2.3211, 3.5264, 0.9194, 2.853, 2.8698, 0.8162, 3.6001, 3.5264, 0.9194, 2.853, 3.6844, 0.9933, 3.4003, 2.9722, 0.8734, 4.092, 3.6844, 0.9933, 3.4003, 3.7988, 1.0579, 3.9594, 3.0357, 0.922, 4.5912, 3.7988, 1.0579, 3.9594, 3.869, 1.1127, 4.5269, 3.0599, 0.9617, 5.0948, 3.869, 1.1127, 4.5269, 3.8945, 1.1573, 5.099, 0.5, 0, 0.5, 0.9913, 0.0803, -0.2025, 0.9112, 0.0803, 0.7943, 0.9112, 0.0803, 0.7943, 1.4573, 0.1786, 0.1335, 1.2975, 0.1786, 1.1206, 1.2975, 0.1786, 1.1206, 1.8948, 0.3026, 0.5057, 1.6563, 0.3026, 1.4768, 1.6563, 0.3026, 1.4768, 2.4837, 0.5401, 0.8516, 2.0875, 0.5093, 1.7692, 2.0875, 0.5093, 1.7692, 2.8029, 0.6462, 1.3172, 2.3366, 0.5968, 2.2005, 2.3366, 0.5968, 2.2005, 3.0842, 0.7453, 1.8081, 2.551, 0.6774, 2.6513, 2.551, 0.6774, 2.6513, 3.3259, 0.8365, 2.3211, 2.729, 0.7507, 3.1189, 2.729, 0.7507, 3.1189, 3.5264, 0.9194, 2.853, 2.8698, 0.8162, 3.6001, 2.8698, 0.8162, 3.6001, 3.6844, 0.9933, 3.4003, 2.9722, 0.8734, 4.092, 2.9722, 0.8734, 4.092, 3.7988, 1.0579, 3.9594, 3.0357, 0.922, 4.5912, 3.0357, 0.922, 4.5912, 3.869, 1.1127, 4.5269, 3.0599, 0.9617, 5.0948, 3.0599, 0.9617, 5.0948, 3.8945, 1.1573, 5.099, 3.0445, 0.9922, 5.5992 )

[sub_resource type="ShaderMaterial" id=19]
shader = SubResource( 1 )
shader_param/texture_0 = ExtResource( 4 )

[sub_resource type="ArrayMesh" id=20]
resource_name = "Cylinder"
surfaces/0 = {
"aabb": AABB( -1, -1, -1, 2, 2.00001, 2 ),
"array_data": PoolByteArray( 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 128, 191, 127, 105, 129, 74, 132, 72, 0, 0, 7, 239, 195, 62, 0, 0, 128, 191, 102, 131, 108, 191, 127, 105, 129, 74, 1, 72, 0, 70, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 128, 191, 127, 105, 129, 74, 132, 72, 0, 70, 7, 239, 195, 62, 0, 0, 128, 63, 102, 131, 108, 191, 127, 76, 129, 88, 1, 72, 0, 0, 247, 4, 53, 63, 0, 0, 128, 191, 247, 4, 53, 191, 127, 76, 129, 88, 3, 71, 0, 70, 7, 239, 195, 62, 0, 0, 128, 191, 102, 131, 108, 191, 127, 76, 129, 88, 1, 72, 0, 70, 247, 4, 53, 63, 0, 0, 128, 63, 247, 4, 53, 191, 127, 50, 129, 101, 3, 71, 0, 0, 102, 131, 108, 63, 0, 0, 128, 191, 7, 239, 195, 190, 127, 50, 129, 101, 3, 70, 0, 70, 247, 4, 53, 63, 0, 0, 128, 191, 247, 4, 53, 191, 127, 50, 129, 101, 3, 71, 0, 70, 102, 131, 108, 63, 0, 0, 128, 63, 7, 239, 195, 190, 127, 21, 129, 116, 3, 70, 0, 0, 0, 0, 128, 63, 0, 0, 128, 191, 49, 189, 59, 51, 127, 21, 129, 116, 3, 69, 0, 70, 102, 131, 108, 63, 0, 0, 128, 191, 7, 239, 195, 190, 127, 21, 129, 116, 3, 70, 0, 70, 0, 0, 128, 63, 0, 0, 128, 63, 49, 189, 59, 51, 105, 0, 127, 116, 3, 69, 0, 0, 102, 131, 108, 63, 0, 0, 128, 191, 40, 239, 195, 62, 105, 0, 127, 116, 3, 68, 0, 70, 0, 0, 128, 63, 0, 0, 128, 191, 49, 189, 59, 51, 105, 0, 127, 116, 3, 69, 0, 70, 102, 131, 108, 63, 0, 0, 128, 63, 40, 239, 195, 62, 76, 0, 127, 101, 3, 68, 0, 0, 247, 4, 53, 63, 0, 0, 128, 191, 247, 4, 53, 63, 76, 0, 127, 101, 0, 66, 0, 70, 102, 131, 108, 63, 0, 0, 128, 191, 40, 239, 195, 62, 76, 0, 127, 101, 3, 68, 0, 70, 247, 4, 53, 63, 0, 0, 128, 63, 247, 4, 53, 63, 50, 0, 127, 88, 0, 66, 0, 0, 7, 239, 195, 62, 0, 0, 128, 191, 102, 131, 108, 63, 50, 0, 127, 88, 0, 64, 0, 70, 247, 4, 53, 63, 0, 0, 128, 191, 247, 4, 53, 63, 50, 0, 127, 88, 0, 66, 0, 70, 7, 239, 195, 62, 0, 0, 128, 63, 102, 131, 108, 63, 21, 0, 127, 74, 0, 64, 0, 0, 119, 33, 34, 52, 0, 0, 128, 191, 0, 0, 128, 63, 21, 0, 127, 74, 0, 60, 0, 70, 7, 239, 195, 62, 0, 0, 128, 191, 102, 131, 108, 63, 21, 0, 127, 74, 0, 64, 0, 70, 119, 33, 34, 52, 0, 0, 128, 63, 0, 0, 128, 63, 235, 0, 105, 63, 0, 60, 0, 0, 7, 239, 195, 190, 0, 0, 128, 191, 102, 131, 108, 63, 235, 0, 105, 63, 0, 0, 0, 70, 119, 33, 34, 52, 0, 0, 128, 191, 0, 0, 128, 63, 235, 0, 105, 63, 0, 60, 0, 70, 7, 239, 195, 190, 0, 0, 128, 63, 102, 131, 108, 63, 206, 0, 76, 63, 0, 0, 0, 0, 247, 4, 53, 191, 0, 0, 128, 191, 247, 4, 53, 63, 206, 0, 76, 63, 0, 188, 0, 70, 7, 239, 195, 190, 0, 0, 128, 191, 102, 131, 108, 63, 206, 0, 76, 63, 0, 0, 0, 70, 247, 4, 53, 191, 0, 0, 128, 63, 247, 4, 53, 63, 180, 0, 50, 63, 0, 188, 0, 0, 102, 131, 108, 191, 0, 0, 128, 191, 40, 239, 195, 62, 180, 0, 50, 63, 7, 192, 0, 70, 247, 4, 53, 191, 0, 0, 128, 191, 247, 4, 53, 63, 180, 0, 50, 63, 0, 188, 0, 70, 102, 131, 108, 191, 0, 0, 128, 63, 40, 239, 195, 62, 151, 0, 21, 63, 7, 192, 0, 0, 0, 0, 128, 191, 0, 0, 128, 191, 68, 222, 76, 178, 151, 0, 21, 63, 7, 194, 0, 70, 102, 131, 108, 191, 0, 0, 128, 191, 40, 239, 195, 62, 151, 0, 21, 63, 7, 192, 0, 70, 0, 0, 128, 191, 0, 0, 128, 63, 68, 222, 76, 178, 129, 21, 235, 63, 7, 194, 0, 0, 86, 131, 108, 191, 0, 0, 128, 191, 40, 239, 195, 190, 129, 21, 235, 63, 3, 196, 0, 70, 0, 0, 128, 191, 0, 0, 128, 191, 68, 222, 76, 178, 129, 21, 235, 63, 7, 194, 0, 70, 86, 131, 108, 191, 0, 0, 128, 63, 40, 239, 195, 190, 129, 50, 206, 63, 3, 196, 0, 0, 247, 4, 53, 191, 0, 0, 128, 191, 247, 4, 53, 191, 129, 50, 206, 63, 3, 197, 0, 70, 86, 131, 108, 191, 0, 0, 128, 191, 40, 239, 195, 190, 129, 50, 206, 63, 3, 196, 0, 70, 247, 4, 53, 191, 0, 0, 128, 63, 247, 4, 53, 191, 129, 76, 180, 63, 3, 197, 0, 0, 7, 239, 195, 190, 0, 0, 128, 191, 102, 131, 108, 191, 129, 76, 180, 63, 3, 198, 0, 70, 247, 4, 53, 191, 0, 0, 128, 191, 247, 4, 53, 191, 129, 76, 180, 63, 3, 197, 0, 70, 7, 239, 195, 190, 0, 0, 128, 63, 102, 131, 108, 191, 129, 105, 151, 63, 3, 198, 0, 0, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 128, 191, 129, 105, 151, 63, 8, 199, 0, 70, 7, 239, 195, 190, 0, 0, 128, 191, 102, 131, 108, 191, 129, 105, 151, 63, 3, 198, 0, 70, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 128, 191, 127, 105, 129, 74, 132, 72, 0, 0, 7, 239, 195, 62, 0, 0, 128, 63, 102, 131, 108, 191, 127, 105, 129, 74, 1, 72, 0, 0, 7, 239, 195, 62, 0, 0, 128, 191, 102, 131, 108, 191, 127, 105, 129, 74, 1, 72, 0, 70, 7, 239, 195, 62, 0, 0, 128, 63, 102, 131, 108, 191, 127, 76, 129, 88, 1, 72, 0, 0, 247, 4, 53, 63, 0, 0, 128, 63, 247, 4, 53, 191, 127, 76, 129, 88, 3, 71, 0, 0, 247, 4, 53, 63, 0, 0, 128, 191, 247, 4, 53, 191, 127, 76, 129, 88, 3, 71, 0, 70, 247, 4, 53, 63, 0, 0, 128, 63, 247, 4, 53, 191, 127, 50, 129, 101, 3, 71, 0, 0, 102, 131, 108, 63, 0, 0, 128, 63, 7, 239, 195, 190, 127, 50, 129, 101, 3, 70, 0, 0, 102, 131, 108, 63, 0, 0, 128, 191, 7, 239, 195, 190, 127, 50, 129, 101, 3, 70, 0, 70, 102, 131, 108, 63, 0, 0, 128, 63, 7, 239, 195, 190, 127, 21, 129, 116, 3, 70, 0, 0, 0, 0, 128, 63, 0, 0, 128, 63, 49, 189, 59, 51, 127, 21, 129, 116, 3, 69, 0, 0, 0, 0, 128, 63, 0, 0, 128, 191, 49, 189, 59, 51, 127, 21, 129, 116, 3, 69, 0, 70, 102, 131, 108, 63, 0, 0, 128, 63, 40, 239, 195, 62, 105, 0, 127, 116, 3, 68, 0, 0, 247, 4, 53, 63, 0, 0, 128, 63, 247, 4, 53, 63, 76, 0, 127, 101, 0, 66, 0, 0, 7, 239, 195, 62, 0, 0, 128, 63, 102, 131, 108, 63, 50, 0, 127, 88, 0, 64, 0, 0, 119, 33, 34, 52, 0, 0, 128, 63, 0, 0, 128, 63, 21, 0, 127, 74, 0, 60, 0, 0, 7, 239, 195, 190, 0, 0, 128, 63, 102, 131, 108, 63, 235, 0, 105, 63, 0, 0, 0, 0, 247, 4, 53, 191, 0, 0, 128, 63, 247, 4, 53, 63, 206, 0, 76, 63, 0, 188, 0, 0, 102, 131, 108, 191, 0, 0, 128, 63, 40, 239, 195, 62, 180, 0, 50, 63, 7, 192, 0, 0, 0, 0, 128, 191, 0, 0, 128, 63, 68, 222, 76, 178, 151, 0, 21, 63, 7, 194, 0, 0, 86, 131, 108, 191, 0, 0, 128, 63, 40, 239, 195, 190, 129, 21, 235, 63, 3, 196, 0, 0, 247, 4, 53, 191, 0, 0, 128, 63, 247, 4, 53, 191, 129, 50, 206, 63, 3, 197, 0, 0, 7, 239, 195, 190, 0, 0, 128, 63, 102, 131, 108, 191, 129, 76, 180, 63, 3, 198, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 128, 191, 129, 105, 151, 63, 8, 199, 0, 0, 148, 24, 132, 178, 119, 190, 127, 63, 119, 190, 127, 191, 235, 0, 129, 182, 132, 72, 0, 0, 148, 24, 132, 178, 119, 190, 127, 191, 119, 190, 127, 191, 235, 0, 129, 182, 132, 72, 0, 70, 245, 188, 195, 62, 119, 190, 127, 191, 216, 70, 108, 191, 235, 0, 129, 182, 1, 72, 0, 70, 245, 188, 195, 62, 119, 190, 127, 63, 216, 70, 108, 191, 206, 0, 129, 168, 1, 72, 0, 0, 245, 188, 195, 62, 119, 190, 127, 191, 216, 70, 108, 191, 206, 0, 129, 168, 1, 72, 0, 70, 161, 214, 52, 63, 119, 190, 127, 191, 161, 214, 52, 191, 206, 0, 129, 168, 3, 71, 0, 70, 161, 214, 52, 63, 119, 190, 127, 63, 161, 214, 52, 191, 180, 0, 129, 155, 3, 71, 0, 0, 161, 214, 52, 63, 119, 190, 127, 191, 161, 214, 52, 191, 180, 0, 129, 155, 3, 71, 0, 70, 216, 70, 108, 63, 119, 190, 127, 191, 245, 188, 195, 190, 180, 0, 129, 155, 3, 70, 0, 70, 216, 70, 108, 63, 119, 190, 127, 63, 245, 188, 195, 190, 151, 0, 129, 140, 3, 70, 0, 0, 216, 70, 108, 63, 119, 190, 127, 191, 245, 188, 195, 190, 151, 0, 129, 140, 3, 70, 0, 70, 119, 190, 127, 63, 119, 190, 127, 191, 245, 13, 245, 50, 151, 0, 129, 140, 3, 69, 0, 70, 119, 190, 127, 63, 119, 190, 127, 63, 245, 13, 245, 50, 129, 21, 127, 140, 3, 69, 0, 0, 119, 190, 127, 63, 119, 190, 127, 191, 245, 13, 245, 50, 129, 21, 127, 140, 3, 69, 0, 70, 216, 70, 108, 63, 119, 190, 127, 191, 245, 188, 195, 62, 129, 21, 127, 140, 3, 68, 0, 70, 216, 70, 108, 63, 119, 190, 127, 63, 245, 188, 195, 62, 129, 50, 127, 155, 3, 68, 0, 0, 216, 70, 108, 63, 119, 190, 127, 191, 245, 188, 195, 62, 129, 50, 127, 155, 3, 68, 0, 70, 161, 214, 52, 63, 119, 190, 127, 191, 161, 214, 52, 63, 129, 50, 127, 155, 0, 66, 0, 70, 161, 214, 52, 63, 119, 190, 127, 63, 161, 214, 52, 63, 129, 76, 127, 168, 0, 66, 0, 0, 161, 214, 52, 63, 119, 190, 127, 191, 161, 214, 52, 63, 129, 76, 127, 168, 0, 66, 0, 70, 245, 188, 195, 62, 119, 190, 127, 191, 216, 70, 108, 63, 129, 76, 127, 168, 0, 64, 0, 70, 245, 188, 195, 62, 119, 190, 127, 63, 216, 70, 108, 63, 129, 105, 127, 182, 0, 64, 0, 0, 245, 188, 195, 62, 119, 190, 127, 191, 216, 70, 108, 63, 129, 105, 127, 182, 0, 64, 0, 70, 204, 116, 49, 52, 119, 190, 127, 191, 119, 190, 127, 63, 129, 105, 127, 182, 0, 60, 0, 70, 204, 116, 49, 52, 119, 190, 127, 63, 119, 190, 127, 63, 127, 105, 105, 193, 0, 60, 0, 0, 204, 116, 49, 52, 119, 190, 127, 191, 119, 190, 127, 63, 127, 105, 105, 193, 0, 60, 0, 70, 245, 188, 195, 190, 119, 190, 127, 191, 216, 70, 108, 63, 127, 105, 105, 193, 0, 0, 0, 70, 245, 188, 195, 190, 119, 190, 127, 63, 216, 70, 108, 63, 127, 76, 76, 193, 0, 0, 0, 0, 245, 188, 195, 190, 119, 190, 127, 191, 216, 70, 108, 63, 127, 76, 76, 193, 0, 0, 0, 70, 145, 214, 52, 191, 119, 190, 127, 191, 161, 214, 52, 63, 127, 76, 76, 193, 0, 188, 0, 70, 145, 214, 52, 191, 119, 190, 127, 63, 161, 214, 52, 63, 127, 50, 50, 193, 0, 188, 0, 0, 145, 214, 52, 191, 119, 190, 127, 191, 161, 214, 52, 63, 127, 50, 50, 193, 0, 188, 0, 70, 216, 70, 108, 191, 119, 190, 127, 191, 245, 188, 195, 62, 127, 50, 50, 193, 7, 192, 0, 70, 216, 70, 108, 191, 119, 190, 127, 63, 245, 188, 195, 62, 127, 21, 21, 193, 7, 192, 0, 0, 216, 70, 108, 191, 119, 190, 127, 191, 245, 188, 195, 62, 127, 21, 21, 193, 7, 192, 0, 70, 119, 190, 127, 191, 119, 190, 127, 191, 119, 246, 60, 49, 127, 21, 21, 193, 7, 194, 0, 70, 119, 190, 127, 191, 119, 190, 127, 63, 119, 246, 60, 49, 105, 0, 235, 193, 7, 194, 0, 0, 119, 190, 127, 191, 119, 190, 127, 191, 119, 246, 60, 49, 105, 0, 235, 193, 7, 194, 0, 70, 216, 70, 108, 191, 119, 190, 127, 191, 245, 188, 195, 190, 105, 0, 235, 193, 3, 196, 0, 70, 216, 70, 108, 191, 119, 190, 127, 63, 245, 188, 195, 190, 76, 0, 206, 193, 3, 196, 0, 0, 216, 70, 108, 191, 119, 190, 127, 191, 245, 188, 195, 190, 76, 0, 206, 193, 3, 196, 0, 70, 145, 214, 52, 191, 119, 190, 127, 191, 161, 214, 52, 191, 76, 0, 206, 193, 3, 197, 0, 70, 145, 214, 52, 191, 119, 190, 127, 63, 161, 214, 52, 191, 50, 0, 180, 193, 3, 197, 0, 0, 145, 214, 52, 191, 119, 190, 127, 191, 161, 214, 52, 191, 50, 0, 180, 193, 3, 197, 0, 70, 211, 188, 195, 190, 119, 190, 127, 191, 216, 70, 108, 191, 50, 0, 180, 193, 3, 198, 0, 70, 211, 188, 195, 190, 119, 190, 127, 63, 216, 70, 108, 191, 21, 0, 151, 193, 3, 198, 0, 0, 211, 188, 195, 190, 119, 190, 127, 191, 216, 70, 108, 191, 21, 0, 151, 193, 3, 198, 0, 70, 148, 24, 132, 178, 119, 190, 127, 191, 119, 190, 127, 191, 21, 0, 151, 193, 8, 199, 0, 70, 148, 24, 132, 178, 119, 190, 127, 63, 119, 190, 127, 191, 235, 0, 129, 182, 132, 72, 0, 0, 245, 188, 195, 62, 119, 190, 127, 191, 216, 70, 108, 191, 235, 0, 129, 182, 1, 72, 0, 70, 245, 188, 195, 62, 119, 190, 127, 63, 216, 70, 108, 191, 235, 0, 129, 182, 1, 72, 0, 0, 161, 214, 52, 63, 119, 190, 127, 63, 161, 214, 52, 191, 206, 0, 129, 168, 3, 71, 0, 0, 161, 214, 52, 63, 119, 190, 127, 63, 161, 214, 52, 191, 180, 0, 129, 155, 3, 71, 0, 0, 216, 70, 108, 63, 119, 190, 127, 191, 245, 188, 195, 190, 180, 0, 129, 155, 3, 70, 0, 70, 216, 70, 108, 63, 119, 190, 127, 63, 245, 188, 195, 190, 180, 0, 129, 155, 3, 70, 0, 0, 216, 70, 108, 63, 119, 190, 127, 63, 245, 188, 195, 190, 151, 0, 129, 140, 3, 70, 0, 0, 119, 190, 127, 63, 119, 190, 127, 191, 245, 13, 245, 50, 151, 0, 129, 140, 3, 69, 0, 70, 119, 190, 127, 63, 119, 190, 127, 63, 245, 13, 245, 50, 151, 0, 129, 140, 3, 69, 0, 0, 216, 70, 108, 63, 119, 190, 127, 63, 245, 188, 195, 62, 129, 21, 127, 140, 3, 68, 0, 0, 161, 214, 52, 63, 119, 190, 127, 63, 161, 214, 52, 63, 129, 50, 127, 155, 0, 66, 0, 0, 245, 188, 195, 62, 119, 190, 127, 63, 216, 70, 108, 63, 129, 76, 127, 168, 0, 64, 0, 0, 204, 116, 49, 52, 119, 190, 127, 63, 119, 190, 127, 63, 129, 105, 127, 182, 0, 60, 0, 0, 204, 116, 49, 52, 119, 190, 127, 63, 119, 190, 127, 63, 127, 105, 105, 193, 0, 60, 0, 0, 245, 188, 195, 190, 119, 190, 127, 191, 216, 70, 108, 63, 127, 105, 105, 193, 0, 0, 0, 70, 245, 188, 195, 190, 119, 190, 127, 63, 216, 70, 108, 63, 127, 105, 105, 193, 0, 0, 0, 0, 245, 188, 195, 190, 119, 190, 127, 63, 216, 70, 108, 63, 127, 76, 76, 193, 0, 0, 0, 0, 145, 214, 52, 191, 119, 190, 127, 191, 161, 214, 52, 63, 127, 76, 76, 193, 0, 188, 0, 70, 145, 214, 52, 191, 119, 190, 127, 63, 161, 214, 52, 63, 127, 76, 76, 193, 0, 188, 0, 0, 145, 214, 52, 191, 119, 190, 127, 63, 161, 214, 52, 63, 127, 50, 50, 193, 0, 188, 0, 0, 216, 70, 108, 191, 119, 190, 127, 191, 245, 188, 195, 62, 127, 50, 50, 193, 7, 192, 0, 70, 216, 70, 108, 191, 119, 190, 127, 63, 245, 188, 195, 62, 127, 50, 50, 193, 7, 192, 0, 0, 216, 70, 108, 191, 119, 190, 127, 63, 245, 188, 195, 62, 127, 21, 21, 193, 7, 192, 0, 0, 119, 190, 127, 191, 119, 190, 127, 191, 119, 246, 60, 49, 127, 21, 21, 193, 7, 194, 0, 70, 119, 190, 127, 191, 119, 190, 127, 63, 119, 246, 60, 49, 127, 21, 21, 193, 7, 194, 0, 0, 216, 70, 108, 191, 119, 190, 127, 63, 245, 188, 195, 190, 105, 0, 235, 193, 3, 196, 0, 0, 145, 214, 52, 191, 119, 190, 127, 63, 161, 214, 52, 191, 76, 0, 206, 193, 3, 197, 0, 0, 211, 188, 195, 190, 119, 190, 127, 63, 216, 70, 108, 191, 50, 0, 180, 193, 3, 198, 0, 0, 148, 24, 132, 178, 119, 190, 127, 63, 119, 190, 127, 191, 21, 0, 151, 193, 8, 199, 0, 0 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 3, 0, 5, 0, 4, 0, 6, 0, 8, 0, 7, 0, 9, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 15, 0, 17, 0, 16, 0, 18, 0, 20, 0, 19, 0, 21, 0, 23, 0, 22, 0, 24, 0, 26, 0, 25, 0, 27, 0, 29, 0, 28, 0, 30, 0, 32, 0, 31, 0, 33, 0, 35, 0, 34, 0, 36, 0, 38, 0, 37, 0, 39, 0, 41, 0, 40, 0, 42, 0, 44, 0, 43, 0, 45, 0, 47, 0, 46, 0, 48, 0, 50, 0, 49, 0, 51, 0, 53, 0, 52, 0, 54, 0, 56, 0, 55, 0, 57, 0, 59, 0, 58, 0, 12, 0, 13, 0, 60, 0, 15, 0, 16, 0, 61, 0, 18, 0, 19, 0, 62, 0, 21, 0, 22, 0, 63, 0, 24, 0, 25, 0, 64, 0, 27, 0, 28, 0, 65, 0, 30, 0, 31, 0, 66, 0, 33, 0, 34, 0, 67, 0, 36, 0, 37, 0, 68, 0, 39, 0, 40, 0, 69, 0, 42, 0, 43, 0, 70, 0, 45, 0, 46, 0, 71, 0, 72, 0, 74, 0, 73, 0, 75, 0, 77, 0, 76, 0, 78, 0, 80, 0, 79, 0, 81, 0, 83, 0, 82, 0, 84, 0, 86, 0, 85, 0, 87, 0, 89, 0, 88, 0, 90, 0, 92, 0, 91, 0, 93, 0, 95, 0, 94, 0, 96, 0, 98, 0, 97, 0, 99, 0, 101, 0, 100, 0, 102, 0, 104, 0, 103, 0, 105, 0, 107, 0, 106, 0, 108, 0, 110, 0, 109, 0, 111, 0, 113, 0, 112, 0, 114, 0, 116, 0, 115, 0, 117, 0, 119, 0, 118, 0, 120, 0, 122, 0, 121, 0, 75, 0, 123, 0, 77, 0, 124, 0, 126, 0, 125, 0, 127, 0, 129, 0, 128, 0, 84, 0, 130, 0, 86, 0, 87, 0, 131, 0, 89, 0, 90, 0, 132, 0, 92, 0, 93, 0, 133, 0, 95, 0, 134, 0, 136, 0, 135, 0, 137, 0, 139, 0, 138, 0, 140, 0, 142, 0, 141, 0, 143, 0, 145, 0, 144, 0, 108, 0, 146, 0, 110, 0, 111, 0, 147, 0, 113, 0, 114, 0, 148, 0, 116, 0, 117, 0, 149, 0, 119, 0 ),
"blend_shape_data": [  ],
"format": 2194711,
"index_count": 192,
"material": SubResource( 19 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 150
}

[sub_resource type="ConcavePolygonShape" id=21]
data = PoolVector3Array( 0, 1, -1, 0, -1, -1, 0.3827, -1, -0.9239, 0.3827, 1, -0.9239, 0.3827, -1, -0.9239, 0.7071, -1, -0.7071, 0.7071, 1, -0.7071, 0.7071, -1, -0.7071, 0.9239, -1, -0.3827, 0.9239, 1, -0.3827, 0.9239, -1, -0.3827, 1, -1, 0, 1, 1, 0, 1, -1, 0, 0.9239, -1, 0.3827, 0.9239, 1, 0.3827, 0.9239, -1, 0.3827, 0.7071, -1, 0.7071, 0.7071, 1, 0.7071, 0.7071, -1, 0.7071, 0.3827, -1, 0.9239, 0.3827, 1, 0.9239, 0.3827, -1, 0.9239, 0, -1, 1, 0, 1, 1, 0, -1, 1, -0.3827, -1, 0.9239, -0.3827, 1, 0.9239, -0.3827, -1, 0.9239, -0.7071, -1, 0.7071, -0.7071, 1, 0.7071, -0.7071, -1, 0.7071, -0.9239, -1, 0.3827, -0.9239, 1, 0.3827, -0.9239, -1, 0.3827, -1, -1, 0, -1, 1, 0, -1, -1, 0, -0.9239, -1, -0.3827, -0.9239, 1, -0.3827, -0.9239, -1, -0.3827, -0.7071, -1, -0.7071, -0.7071, 1, -0.7071, -0.7071, -1, -0.7071, -0.3827, -1, -0.9239, -0.3827, 1, -0.9239, -0.3827, -1, -0.9239, 0, -1, -1, 0, 1, -1, 0.3827, -1, -0.9239, 0.3827, 1, -0.9239, 0.3827, 1, -0.9239, 0.7071, -1, -0.7071, 0.7071, 1, -0.7071, 0.7071, 1, -0.7071, 0.9239, -1, -0.3827, 0.9239, 1, -0.3827, 0.9239, 1, -0.3827, 1, -1, 0, 1, 1, 0, 1, 1, 0, 0.9239, -1, 0.3827, 0.9239, 1, 0.3827, 0.9239, 1, 0.3827, 0.7071, -1, 0.7071, 0.7071, 1, 0.7071, 0.7071, 1, 0.7071, 0.3827, -1, 0.9239, 0.3827, 1, 0.9239, 0.3827, 1, 0.9239, 0, -1, 1, 0, 1, 1, 0, 1, 1, -0.3827, -1, 0.9239, -0.3827, 1, 0.9239, -0.3827, 1, 0.9239, -0.7071, -1, 0.7071, -0.7071, 1, 0.7071, -0.7071, 1, 0.7071, -0.9239, -1, 0.3827, -0.9239, 1, 0.3827, -0.9239, 1, 0.3827, -1, -1, 0, -1, 1, 0, -1, 1, 0, -0.9239, -1, -0.3827, -0.9239, 1, -0.3827, -0.9239, 1, -0.3827, -0.7071, -1, -0.7071, -0.7071, 1, -0.7071, -0.7071, 1, -0.7071, -0.3827, -1, -0.9239, -0.3827, 1, -0.9239, -0.3827, 1, -0.9239, 0, -1, -1, 0, 1, -1, 0, 0.999, -0.999, 0.3823, -0.999, -0.923, 0, -0.999, -0.999, 0.3823, 0.999, -0.923, 0.7064, -0.999, -0.7064, 0.3823, -0.999, -0.923, 0.7064, 0.999, -0.7064, 0.923, -0.999, -0.3823, 0.7064, -0.999, -0.7064, 0.923, 0.999, -0.3823, 0.999, -0.999, 0, 0.923, -0.999, -0.3823, 0.999, 0.999, 0, 0.923, -0.999, 0.3823, 0.999, -0.999, 0, 0.923, 0.999, 0.3823, 0.7064, -0.999, 0.7064, 0.923, -0.999, 0.3823, 0.7064, 0.999, 0.7064, 0.3823, -0.999, 0.923, 0.7064, -0.999, 0.7064, 0.3823, 0.999, 0.923, 0, -0.999, 0.999, 0.3823, -0.999, 0.923, 0, 0.999, 0.999, -0.3823, -0.999, 0.923, 0, -0.999, 0.999, -0.3823, 0.999, 0.923, -0.7064, -0.999, 0.7064, -0.3823, -0.999, 0.923, -0.7064, 0.999, 0.7064, -0.923, -0.999, 0.3823, -0.7064, -0.999, 0.7064, -0.923, 0.999, 0.3823, -0.999, -0.999, 0, -0.923, -0.999, 0.3823, -0.999, 0.999, 0, -0.923, -0.999, -0.3823, -0.999, -0.999, 0, -0.923, 0.999, -0.3823, -0.7064, -0.999, -0.7064, -0.923, -0.999, -0.3823, -0.7064, 0.999, -0.7064, -0.3823, -0.999, -0.923, -0.7064, -0.999, -0.7064, -0.3823, 0.999, -0.923, 0, -0.999, -0.999, -0.3823, -0.999, -0.923, 0, 0.999, -0.999, 0.3823, 0.999, -0.923, 0.3823, -0.999, -0.923, 0.3823, 0.999, -0.923, 0.7064, 0.999, -0.7064, 0.7064, -0.999, -0.7064, 0.7064, 0.999, -0.7064, 0.923, 0.999, -0.3823, 0.923, -0.999, -0.3823, 0.923, 0.999, -0.3823, 0.999, 0.999, 0, 0.999, -0.999, 0, 0.999, 0.999, 0, 0.923, 0.999, 0.3823, 0.923, -0.999, 0.3823, 0.923, 0.999, 0.3823, 0.7064, 0.999, 0.7064, 0.7064, -0.999, 0.7064, 0.7064, 0.999, 0.7064, 0.3823, 0.999, 0.923, 0.3823, -0.999, 0.923, 0.3823, 0.999, 0.923, 0, 0.999, 0.999, 0, -0.999, 0.999, 0, 0.999, 0.999, -0.3823, 0.999, 0.923, -0.3823, -0.999, 0.923, -0.3823, 0.999, 0.923, -0.7064, 0.999, 0.7064, -0.7064, -0.999, 0.7064, -0.7064, 0.999, 0.7064, -0.923, 0.999, 0.3823, -0.923, -0.999, 0.3823, -0.923, 0.999, 0.3823, -0.999, 0.999, 0, -0.999, -0.999, 0, -0.999, 0.999, 0, -0.923, 0.999, -0.3823, -0.923, -0.999, -0.3823, -0.923, 0.999, -0.3823, -0.7064, 0.999, -0.7064, -0.7064, -0.999, -0.7064, -0.7064, 0.999, -0.7064, -0.3823, 0.999, -0.923, -0.3823, -0.999, -0.923, -0.3823, 0.999, -0.923, 0, 0.999, -0.999, 0, -0.999, -0.999 )

[sub_resource type="Shader" id=22]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0: hint_albedo;


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}

void vertex () {
}

void fragment () {
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node0_in0_vector = vec3(0.0, 0.0, 0.0);
	// output sockets definitions
	vec4 node0_out0_color;
	float node0_out1_alpha;
	
	node0_in0_vector = vec3(UV, 0.0);
	node_tex_image(node0_in0_vector, texture_0, node0_out0_color, node0_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node1_in0_basecolor = node0_out0_color;
	float node1_in1_subsurface = float(0.0);
	vec3 node1_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node1_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node1_in4_metallic = float(0.0);
	float node1_in5_specular = float(0.5);
	float node1_in6_speculartint = float(0.0);
	float node1_in7_roughness = float(0.4000000059604645);
	float node1_in8_anisotropic = float(0.0);
	float node1_in9_anisotropicrotation = float(0.0);
	float node1_in10_sheen = float(0.0);
	float node1_in11_sheentint = float(0.5);
	float node1_in12_clearcoat = float(0.0);
	float node1_in13_clearcoatroughness = float(0.029999999329447746);
	float node1_in14_ior = float(1.4500000476837158);
	float node1_in15_transmission = float(0.0);
	float node1_in16_transmissionroughness = float(0.0);
	vec4 node1_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node1_in18_emissionstrength = float(1.0);
	float node1_in19_alpha = float(1.0);
	vec3 node1_in20_normal = NORMAL;
	vec3 node1_in21_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node1_in22_tangent = TANGENT;
	// output sockets definitions
	vec3 node1_bsdf_out0_albedo;
	float node1_bsdf_out1_sss_strength;
	float node1_bsdf_out3_specular;
	float node1_bsdf_out2_metallic;
	float node1_bsdf_out4_roughness;
	float node1_bsdf_out5_clearcoat;
	float node1_bsdf_out6_clearcoat_gloss;
	float node1_bsdf_out7_anisotropy;
	float node1_bsdf_out8_transmission;
	float node1_bsdf_out9_ior;
	
	node_bsdf_principled(node1_in0_basecolor, node1_in1_subsurface,
		node1_in3_subsurfacecolor, node1_in4_metallic, node1_in5_specular,
		node1_in7_roughness, node1_in12_clearcoat, node1_in13_clearcoatroughness,
		node1_in8_anisotropic, node1_in15_transmission, node1_in14_ior,
		node1_bsdf_out0_albedo, node1_bsdf_out1_sss_strength, node1_bsdf_out2_metallic,
		node1_bsdf_out3_specular, node1_bsdf_out4_roughness, node1_bsdf_out5_clearcoat,
		node1_bsdf_out6_clearcoat_gloss, node1_bsdf_out7_anisotropy,
		node1_bsdf_out8_transmission, node1_bsdf_out9_ior);
	
	
	ALBEDO = node1_bsdf_out0_albedo;
	SSS_STRENGTH = node1_bsdf_out1_sss_strength;
	SPECULAR = node1_bsdf_out3_specular;
	METALLIC = node1_bsdf_out2_metallic;
	ROUGHNESS = node1_bsdf_out4_roughness;
	CLEARCOAT = node1_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node1_bsdf_out6_clearcoat_gloss;
	NORMAL = node1_in20_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node1_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node1_in22_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node1_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=23]
shader = SubResource( 22 )
shader_param/texture_0 = ExtResource( 4 )

[sub_resource type="ArrayMesh" id=24]
resource_name = "Plane"
surfaces/0 = {
"aabb": AABB( -5.00956, -0.437611, -6.81001, 8.01242, 0.454671, 12.0011 ),
"array_data": PoolByteArray( 17, 252, 63, 64, 175, 8, 27, 187, 25, 173, 151, 63, 0, 130, 130, 63, 0, 0, 0, 64, 198, 109, 128, 191, 14, 150, 152, 58, 157, 99, 152, 63, 0, 130, 130, 63, 0, 64, 0, 64, 241, 41, 128, 191, 212, 100, 75, 58, 36, 209, 51, 192, 0, 130, 130, 63, 0, 64, 0, 0, 220, 46, 64, 64, 151, 124, 166, 179, 52, 215, 51, 192, 0, 130, 130, 63, 0, 0, 0, 0, 29, 201, 63, 64, 107, 14, 224, 190, 120, 185, 162, 64, 244, 130, 130, 63, 0, 0, 0, 64, 198, 109, 128, 191, 141, 14, 224, 190, 120, 185, 162, 64, 244, 130, 130, 63, 0, 64, 0, 64, 198, 109, 128, 191, 14, 150, 152, 58, 157, 99, 152, 63, 244, 130, 130, 63, 0, 64, 0, 0, 17, 252, 63, 64, 175, 8, 27, 187, 25, 173, 151, 63, 244, 130, 130, 63, 0, 0, 0, 0, 241, 41, 128, 191, 212, 100, 75, 58, 36, 209, 51, 192, 0, 126, 130, 193, 0, 0, 0, 0, 215, 52, 160, 192, 177, 205, 153, 59, 239, 114, 51, 192, 0, 126, 130, 193, 0, 64, 0, 0, 113, 27, 160, 192, 120, 84, 231, 59, 163, 117, 152, 63, 0, 126, 130, 193, 0, 64, 0, 64, 198, 109, 128, 191, 251, 85, 231, 59, 163, 117, 152, 63, 0, 126, 130, 193, 0, 0, 0, 64, 67, 57, 129, 191, 46, 113, 220, 190, 169, 135, 214, 192, 12, 126, 130, 193, 0, 0, 0, 0, 81, 78, 160, 192, 46, 113, 220, 190, 169, 135, 214, 192, 12, 126, 130, 193, 0, 64, 0, 0, 215, 52, 160, 192, 177, 205, 153, 59, 239, 114, 51, 192, 12, 126, 130, 193, 0, 64, 0, 64, 241, 41, 128, 191, 212, 100, 75, 58, 36, 209, 51, 192, 12, 126, 130, 193, 0, 0, 0, 64, 17, 252, 63, 64, 138, 11, 27, 187, 116, 41, 52, 192, 0, 130, 130, 63, 0, 0, 0, 64, 241, 41, 128, 191, 212, 100, 75, 58, 36, 209, 51, 192, 0, 130, 130, 63, 0, 64, 0, 64, 112, 68, 127, 191, 49, 159, 229, 180, 154, 235, 217, 192, 0, 130, 130, 63, 0, 64, 0, 0, 220, 46, 64, 64, 26, 159, 137, 180, 154, 235, 217, 192, 0, 130, 130, 63, 0, 0, 0, 0, 198, 109, 128, 191, 14, 150, 152, 58, 157, 99, 152, 63, 0, 126, 130, 193, 0, 0, 0, 0, 215, 52, 160, 192, 52, 207, 153, 59, 34, 26, 153, 63, 0, 126, 130, 193, 0, 64, 0, 0, 113, 27, 160, 192, 229, 85, 231, 59, 105, 29, 166, 64, 0, 126, 130, 193, 0, 64, 0, 64, 198, 109, 128, 191, 104, 87, 231, 59, 105, 29, 166, 64, 0, 126, 130, 193, 0, 0, 0, 64, 198, 109, 128, 191, 141, 14, 224, 190, 120, 185, 162, 64, 130, 0, 0, 57, 0, 64, 0, 64, 198, 109, 128, 191, 104, 87, 231, 59, 105, 29, 166, 64, 130, 0, 0, 57, 0, 0, 0, 0, 198, 109, 128, 191, 14, 150, 152, 58, 157, 99, 152, 63, 130, 0, 0, 57, 0, 0, 0, 64, 112, 68, 127, 191, 49, 159, 229, 180, 154, 235, 217, 192, 133, 3, 254, 243, 0, 181, 0, 0, 67, 57, 129, 191, 46, 113, 220, 190, 169, 135, 214, 192, 133, 3, 254, 243, 0, 0, 0, 0, 241, 41, 128, 191, 212, 100, 75, 58, 36, 209, 51, 192, 133, 3, 254, 243, 0, 0, 96, 64, 17, 252, 63, 64, 210, 41, 250, 59, 25, 173, 151, 63, 0, 126, 130, 193, 0, 0, 0, 64, 220, 46, 64, 64, 180, 214, 35, 60, 52, 215, 51, 192, 0, 126, 130, 193, 0, 0, 0, 0, 241, 41, 128, 191, 103, 141, 48, 60, 36, 209, 51, 192, 0, 126, 130, 193, 0, 64, 0, 0, 198, 109, 128, 191, 161, 233, 54, 60, 157, 99, 152, 63, 0, 126, 130, 193, 0, 64, 0, 64, 29, 201, 63, 64, 179, 239, 218, 190, 120, 185, 162, 64, 0, 114, 130, 193, 0, 0, 0, 64, 17, 252, 63, 64, 210, 41, 250, 59, 25, 173, 151, 63, 0, 114, 130, 193, 0, 0, 0, 0, 198, 109, 128, 191, 161, 233, 54, 60, 157, 99, 152, 63, 0, 114, 130, 193, 0, 64, 0, 0, 198, 109, 128, 191, 212, 239, 218, 190, 120, 185, 162, 64, 0, 114, 130, 193, 0, 64, 0, 64, 241, 41, 128, 191, 103, 141, 48, 60, 36, 209, 51, 192, 0, 130, 130, 193, 0, 0, 0, 64, 198, 109, 128, 191, 254, 192, 139, 60, 163, 117, 152, 63, 0, 130, 130, 193, 0, 0, 0, 0, 113, 27, 160, 192, 147, 192, 139, 60, 163, 117, 152, 63, 0, 130, 130, 193, 0, 64, 0, 0, 215, 52, 160, 192, 216, 189, 112, 60, 239, 114, 51, 192, 0, 130, 130, 193, 0, 64, 0, 64, 67, 57, 129, 191, 118, 82, 215, 190, 169, 135, 214, 192, 0, 142, 130, 193, 0, 0, 0, 64, 241, 41, 128, 191, 103, 141, 48, 60, 36, 209, 51, 192, 0, 142, 130, 193, 0, 0, 0, 0, 215, 52, 160, 192, 216, 189, 112, 60, 239, 114, 51, 192, 0, 142, 130, 193, 0, 64, 0, 0, 81, 78, 160, 192, 118, 82, 215, 190, 169, 135, 214, 192, 0, 142, 130, 193, 0, 64, 0, 64, 17, 252, 63, 64, 80, 40, 250, 59, 116, 41, 52, 192, 0, 126, 130, 193, 0, 0, 0, 64, 220, 46, 64, 64, 254, 213, 35, 60, 154, 235, 217, 192, 0, 126, 130, 193, 0, 0, 0, 0, 112, 68, 127, 191, 61, 213, 35, 60, 154, 235, 217, 192, 0, 126, 130, 193, 0, 64, 0, 0, 241, 41, 128, 191, 103, 141, 48, 60, 36, 209, 51, 192, 0, 126, 130, 193, 0, 64, 0, 64, 198, 109, 128, 191, 161, 233, 54, 60, 157, 99, 152, 63, 0, 130, 130, 193, 0, 0, 0, 64, 198, 109, 128, 191, 106, 193, 139, 60, 105, 29, 166, 64, 0, 130, 130, 193, 0, 0, 0, 0, 113, 27, 160, 192, 254, 192, 139, 60, 105, 29, 166, 64, 0, 130, 130, 193, 0, 64, 0, 0, 215, 52, 160, 192, 175, 190, 112, 60, 34, 26, 153, 63, 0, 130, 130, 193, 0, 64, 0, 64, 198, 109, 128, 191, 212, 239, 218, 190, 120, 185, 162, 64, 126, 0, 0, 142, 0, 180, 0, 64, 198, 109, 128, 191, 161, 233, 54, 60, 157, 99, 152, 63, 126, 0, 0, 142, 0, 0, 0, 0, 198, 109, 128, 191, 106, 193, 139, 60, 105, 29, 166, 64, 126, 0, 0, 142, 0, 0, 0, 64, 112, 68, 127, 191, 61, 213, 35, 60, 154, 235, 217, 192, 123, 253, 254, 13, 0, 181, 0, 0, 241, 41, 128, 191, 103, 141, 48, 60, 36, 209, 51, 192, 123, 253, 254, 13, 0, 0, 96, 64, 67, 57, 129, 191, 118, 82, 215, 190, 169, 135, 214, 192, 123, 253, 254, 13, 0, 0, 0, 0 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 0, 0, 3, 0, 2, 0, 4, 0, 6, 0, 5, 0, 4, 0, 7, 0, 6, 0, 8, 0, 10, 0, 9, 0, 8, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 12, 0, 15, 0, 14, 0, 16, 0, 18, 0, 17, 0, 16, 0, 19, 0, 18, 0, 20, 0, 22, 0, 21, 0, 20, 0, 23, 0, 22, 0, 24, 0, 26, 0, 25, 0, 27, 0, 29, 0, 28, 0, 30, 0, 32, 0, 31, 0, 30, 0, 33, 0, 32, 0, 34, 0, 36, 0, 35, 0, 34, 0, 37, 0, 36, 0, 38, 0, 40, 0, 39, 0, 38, 0, 41, 0, 40, 0, 42, 0, 44, 0, 43, 0, 42, 0, 45, 0, 44, 0, 46, 0, 48, 0, 47, 0, 46, 0, 49, 0, 48, 0, 50, 0, 52, 0, 51, 0, 50, 0, 53, 0, 52, 0, 54, 0, 56, 0, 55, 0, 57, 0, 59, 0, 58, 0 ),
"blend_shape_data": [  ],
"format": 2194711,
"index_count": 84,
"material": SubResource( 23 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 60
}

[sub_resource type="ConcavePolygonShape" id=25]
data = PoolVector3Array( 2.9998, -0.0024, 1.185, -1.0013, 0.0008, -2.8096, -1.0034, 0.0012, 1.1905, 2.9998, -0.0024, 1.185, 3.0029, 0, -2.81, -1.0013, 0.0008, -2.8096, 2.9967, -0.4376, 5.0851, -1.0034, 0.0012, 1.1905, -1.0034, -0.4376, 5.0851, 2.9967, -0.4376, 5.0851, 2.9998, -0.0024, 1.185, -1.0034, 0.0012, 1.1905, -1.0013, 0.0008, -2.8096, -5.0033, 0.0071, 1.1911, -5.0065, 0.0047, -2.8039, -1.0013, 0.0008, -2.8096, -1.0034, 0.0071, 1.1911, -5.0033, 0.0071, 1.1911, -1.0096, -0.4306, -6.7041, -5.0065, 0.0047, -2.8039, -5.0096, -0.4306, -6.7041, -1.0096, -0.4306, -6.7041, -1.0013, 0.0008, -2.8096, -5.0065, 0.0047, -2.8039, 2.9998, -0.0024, -2.815, -0.9971, 0, -6.81, -1.0013, 0.0008, -2.8096, 2.9998, -0.0024, -2.815, 3.0029, 0, -6.81, -0.9971, 0, -6.81, -1.0034, 0.0012, 1.1905, -5.0033, 0.0071, 5.1911, -5.0065, 0.0047, 1.1961, -1.0034, 0.0012, 1.1905, -1.0034, 0.0071, 5.1911, -5.0033, 0.0071, 5.1911, -1.0034, -0.4376, 5.0851, -1.0034, 0.0012, 1.1905, -1.0034, 0.0071, 5.1911, -0.9971, 0, -6.81, -1.0013, 0.0008, -2.8096, -1.0096, -0.4306, -6.7041, 2.9998, 0.0076, 1.185, -1.0013, 0.0108, -2.8096, 3.0029, 0.01, -2.81, 2.9998, 0.0076, 1.185, -1.0034, 0.0112, 1.1905, -1.0013, 0.0108, -2.8096, 2.9967, -0.4276, 5.0851, -1.0034, 0.0112, 1.1905, 2.9998, 0.0076, 1.185, 2.9967, -0.4276, 5.0851, -1.0034, -0.4276, 5.0851, -1.0034, 0.0112, 1.1905, -1.0013, 0.0108, -2.8096, -5.0033, 0.0171, 1.1911, -1.0034, 0.0171, 1.1911, -1.0013, 0.0108, -2.8096, -5.0065, 0.0147, -2.8039, -5.0033, 0.0171, 1.1911, -1.0096, -0.4206, -6.7041, -5.0065, 0.0147, -2.8039, -1.0013, 0.0108, -2.8096, -1.0096, -0.4206, -6.7041, -5.0096, -0.4206, -6.7041, -5.0065, 0.0147, -2.8039, 2.9998, 0.0076, -2.815, -0.9971, 0.01, -6.81, 3.0029, 0.01, -6.81, 2.9998, 0.0076, -2.815, -1.0013, 0.0108, -2.8096, -0.9971, 0.01, -6.81, -1.0034, 0.0112, 1.1905, -5.0033, 0.0171, 5.1911, -1.0034, 0.0171, 5.1911, -1.0034, 0.0112, 1.1905, -5.0065, 0.0147, 1.1961, -5.0033, 0.0171, 5.1911, -1.0034, -0.4276, 5.0851, -1.0034, 0.0171, 5.1911, -1.0034, 0.0112, 1.1905, -0.9971, 0.01, -6.81, -1.0096, -0.4206, -6.7041, -1.0013, 0.0108, -2.8096 )

[sub_resource type="ConvexPolygonShape" id=17]
points = PoolVector3Array( 50, 0, 50, 50, 0, -50, -50, 0, -50, -50, 0, 50 )

[node name="TESTMAP" type="Spatial"]

[node name="SpawnPoint" type="Spatial" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, -5 )

[node name="CBody" type="RigidBody" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0 )
mode = 1
physics_material_override = ExtResource( 1 )

[node name="Cube" type="MeshInstance" parent="CBody"]
mesh = SubResource( 3 )
skeleton = NodePath("../..")

[node name="CollisionShape" type="CollisionShape" parent="CBody"]
shape = SubResource( 10 )

[node name="PBody" type="RigidBody" parent="."]
mode = 1
physics_material_override = ExtResource( 1 )

[node name="Plane" type="MeshInstance" parent="PBody"]
mesh = SubResource( 5 )
skeleton = NodePath("../..")

[node name="CollisionShape" type="CollisionShape" parent="PBody"]
shape = SubResource( 12 )

[node name="WBody" type="RigidBody" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -10.0028, 0, -1 )
mode = 1
physics_material_override = ExtResource( 1 )

[node name="Wall2" type="MeshInstance" parent="WBody"]
transform = Transform( -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 0, 0, 1, 0, 0, 0 )
mesh = SubResource( 18 )
skeleton = NodePath("")

[node name="CollisionShape" type="CollisionShape" parent="WBody"]
transform = Transform( -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 0, 0, 1, 0, 0, 0 )
shape = SubResource( 26 )

[node name="CRBody" type="RigidBody" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 2.95987, 0, -5.76851 )
mode = 1
physics_material_override = ExtResource( 1 )

[node name="CurveRamp" type="MeshInstance" parent="CRBody"]
mesh = SubResource( 9 )
skeleton = NodePath("../..")

[node name="CollisionShape" type="CollisionShape" parent="CRBody"]
shape = SubResource( 16 )

[node name="CYBody" type="RigidBody" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 13.2774, 5.71758, -8.28917 )
mode = 1

[node name="Cylinder" type="MeshInstance" parent="CYBody"]
transform = Transform( 5.31089, 0, 1.12886, 0, 5.61848, 0, -1.12886, 0, 5.31089, 0, 0, 0 )
mesh = SubResource( 20 )
skeleton = NodePath("../..")

[node name="CollisionShape" type="CollisionShape" parent="CYBody"]
transform = Transform( 5.31089, 0, 1.12886, 0, 5.61848, 0, -1.12886, 0, 5.31089, 0, 0, 0 )
shape = SubResource( 21 )

[node name="WWABody" type="RigidBody" parent="."]
transform = Transform( 2, 0, 0, 0, 2, 0, 0, 0, 2, 5.098, 10.434, 14.952 )
mode = 1

[node name="WallWAngles" type="MeshInstance" parent="WWABody"]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0 )
mesh = SubResource( 24 )
skeleton = NodePath("../..")

[node name="CollisionShape" type="CollisionShape" parent="WWABody"]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0 )
shape = SubResource( 25 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( -0.782923, 0, 0.622119, 0.287744, 0.886607, 0.36212, -0.551575, 0.462523, -0.694145, 0, 9.17327, -15.9245 )

[node name="DeathPlane" type="Area" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -10, 0 )
input_ray_pickable = false

[node name="CollisionShape" type="CollisionShape" parent="DeathPlane"]
shape = SubResource( 17 )

[node name="MAIN_GUY" parent="." instance=ExtResource( 2 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.314239, -6.33696 )
